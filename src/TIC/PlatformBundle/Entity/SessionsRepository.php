<?php

namespace TIC\PlatformBundle\Entity;

use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;

/**
 * SessionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SessionsRepository extends EntityRepository
{
    /**
     * @param $data
     * @return Sessions[]
     */
    public function findSessionByParam($data)
    {
        $qb = $this->createQueryBuilder('s')
            ->leftJoin('s.trainer', 'trainer')
            ->addSelect('trainer')
            ->leftJoin('s.training', 'training')
            ->addSelect('training')
            ->leftJoin('s.contract', 'co')
            ->addSelect('co')
            ->leftJoin('co.client', 'c')
            ->addSelect('c')
            ->leftJoin('s.RangeDate', 'rd')
            ->addSelect('rd')
            ->leftJoin('s.address', 'sa')
            ->addSelect('sa')
            ->leftJoin('s.language', 'l')
            ->addSelect('l')
            ->leftJoin('s.PerformanceType', 'pt')
            ->addSelect('pt');

        if ($data !== null) {
            $this->multipleData($qb, $data['training'], 'trainings', 'training');
            $this->multipleData($qb, $data['trainer'], 'trainer', 'trainer');
            $this->multipleData($qb, $data['contract'], 'contract', 'co' );

            $this->multipleData($qb, $data['client'], 'client', 'co.client');
            $this->singleData($qb, $data['RangeDate']->getRangeDateBegin(), 'dateBegin', 'rd.rangeDateBegin', $data['RangeDate']->getRangeDateBegin(), ">=");
            $this->singleData($qb, $data['RangeDate']->getRangeDateEnd(), 'dateEnd', 'rd.rangeDateEnd', $data['RangeDate']->getRangeDateEnd(), "<=");
        }

        return $qb->getQuery()->getResult();

    }

    private function singleData(QueryBuilder $qb, $data, $param, $target, $value, $operator = "=")
    {
        if ($data !== null) {
            $qb->andWhere(sprintf("%s %s :%s", $target, $operator, $param))
                ->setParameter($param, $value);
        }
    }

    private function multipleData(QueryBuilder $qb, ArrayCollection $data, $param, $target)
    {
        if (count($data) > 0) {
            $qb->andWhere(sprintf("%s IN (:%s)", $target, $param))
                ->setParameter($param, $data->toArray());
        }
    }

    /**
     * @param $sessionID
     * @return Sessions
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneForPlanning($sessionID)
    {
        $qb = $this->createQueryBuilder('s')
            ->leftJoin('s.trainer', 't')
            ->addSelect('t')
            ->leftJoin('s.events', 'e')
            ->addSelect('e')
            ->leftJoin('e.trainer', 'tr')
            ->addSelect('tr')
            ->where('s.id = :sessionID')
            ->setParameter('sessionID', $sessionID);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $id
     * @return Sessions
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneWithAll($id)
    {
        $qb = $this->createQueryBuilder('s')
            ->leftJoin('s.trainer', 'trainer')
            ->addSelect('trainer')
            ->leftJoin('s.training', 'training')
            ->addSelect('training')
            ->leftJoin('s.contract', 'co')
            ->addSelect('co')
            ->leftJoin('co.client', 'c')
            ->addSelect('c')
            ->leftJoin('s.RangeDate', 'rd')
            ->addSelect('rd')
            ->leftJoin('s.address', 'sa')
            ->addSelect('sa')
            ->leftJoin('sa.countries', 'sac')
            ->addSelect('sac')
            ->leftJoin('s.language', 'l')
            ->addSelect('l')
            ->leftJoin('s.PerformanceType', 'pt')
            ->addSelect('pt')
            ->leftJoin('s.contract', 'sc')
            ->addSelect('sc')
            ->leftJoin('s.events', 'e')
            ->addSelect('e')
            ->where('s.id = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $sessionID
     * @return Sessions
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneForAgenda($sessionID)
    {
        $qb = $this->createQueryBuilder('s')
            ->leftJoin('s.address', 'a')
            ->addSelect('a')
            ->leftJoin('a.countries', 'c')
            ->addSelect('c')
            ->where('s.id = :sessionID')
            ->setParameter('sessionID', $sessionID);

        return $qb->getQuery()->getOneOrNullResult();
    }

    /**
     * @param $sessionID
     * @return Sessions
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findForDelete($sessionID)
    {
        $qb = $this->createQueryBuilder('s')
            ->leftJoin('s.RangeDate', 'r')
            ->addSelect('r')
            ->leftJoin('s.events', 'e')
            ->addSelect('e')
            ->leftJoin('e.trainer', 't')
            ->addSelect('t')
            ->where('s.id = :sessionID')
            ->setParameter('sessionID', $sessionID);

        return $qb->getQuery()->getOneOrNullResult();
    }
}
